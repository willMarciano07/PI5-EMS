Este Ã© o passo a passo para implementar a listagem, inclusÃ£o, ediÃ§Ã£o e exclusÃ£o de produtos na sua aplicaÃ§Ã£o Android, a partir da funcionalidade de listagem que jÃ¡ foi implementada. 
Isso inclui as mudanÃ§as na estrutura da listagem para conceber os botÃµes editar e deletar para cada registro e o botÃ£o incluir antes da listagem.

Passo a Passo para Listagem, InclusÃ£o, EdiÃ§Ã£o e ExclusÃ£o de Produtos. Ã‰ muito IMPORATNTE lembrar de alterar o IP para o seu IPV4 Local nas chamadas da Retrofit.

Requisitos:
    XAMPP rodando e a API hospedada no caminho c:/xampp/htdocs/meu_projeto_api/.

    Banco de dados MySQL remoto configurado.
    DependÃƒÂªncias do Retrofit, Gson, OkHttp, e Picasso no build.gradle.

IMPORTANTE: Lembre-se de ajustar suas credenciais de login no banco de dados dentro de cada arquivo PHP.

Estrutura de pastas no XAMPP:
c:/xampp/htdocs/meu_projeto_api/
    * login.php
    * produtos.php
    * incluir_produto.php
    * editar_produto.php
    * deletar_produto.php

Passo 1: Criar a Tabela PRODUTO no Banco de Dados Remoto
VocÃƒÂª precisa ter a tabela PRODUTO configurada no banco de dados MySQL remoto. 


Passo 2: Criar as APIs no PHP

2.1 - Crie os arquivos PHP para manipular os produtos (listar, incluir, editar e deletar) no diretÃ³rio c:/xampp/htdocs/meu_projeto_api/.


2.2 - API para Incluir Produto (incluir_produto.php):
<?php 
$host = 'www.thyagoquintas.com.br:3306';  
$db   = 'db_fornecido';                   
$user = 'user_fornecido';                 
$pass = 'senha_fornecida';                
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
$options = [
    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES   => false,
];

try {
    $pdo = new PDO($dsn, $user, $pass, $options);

    if (isset($_POST['PRODUTO_NOME'], $_POST['PRODUTO_DESC'], $_POST['PRODUTO_PRECO'], $_POST['PRODUTO_IMAGEM'])) {
        $produtoNome = $_POST['PRODUTO_NOME'];
        $produtoDesc = $_POST['PRODUTO_DESC'];
        $produtoPreco = $_POST['PRODUTO_PRECO'];
        $produtoImagem = $_POST['PRODUTO_IMAGEM'];

        // Inserir o produto
        $sql = "INSERT INTO PRODUTO (PRODUTO_NOME, PRODUTO_DESC, PRODUTO_PRECO, PRODUTO_IMAGEM, CATEGORIA_ID, PRODUTO_ATIVO)
                VALUES (:produtoNome, :produtoDesc, :produtoPreco, :produtoImagem, 1, 1)";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([
            'produtoNome' => $produtoNome,
            'produtoDesc' => $produtoDesc,
            'produtoPreco' => $produtoPreco,
            'produtoImagem' => $produtoImagem
        ]);

        echo json_encode(['status' => 'Produto incluÃƒÂ­do com sucesso']);
    } else {
        echo json_encode(['error' => 'Dados incompletos']);
    }

} catch (PDOException $e) {
    echo "Erro de conexÃ£o: " . $e->getMessage();
    exit;
}
?>


2.3 - API para Editar Produto (editar_produto.php):
<?php
$host = 'www.thyagoquintas.com.br:3306';
$db   = 'db_fornecido';                   
$user = 'user_fornecido';                 
$pass = 'senha_fornecida';                
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
$options = [
    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES   => false,
];

try {
    $pdo = new PDO($dsn, $user, $pass, $options);

    if (isset($_POST['PRODUTO_ID'], $_POST['PRODUTO_NOME'], $_POST['PRODUTO_DESC'], $_POST['PRODUTO_PRECO'], $_POST['PRODUTO_IMAGEM'])) {
        $produtoId = $_POST['PRODUTO_ID'];
        $produtoNome = $_POST['PRODUTO_NOME'];
        $produtoDesc = $_POST['PRODUTO_DESC'];
        $produtoPreco = $_POST['PRODUTO_PRECO'];
        $produtoImagem = $_POST['PRODUTO_IMAGEM'];

        // Atualizar o produto no banco de dados
        $sql = "UPDATE PRODUTO SET PRODUTO_NOME = :produtoNome, PRODUTO_DESC = :produtoDesc, PRODUTO_PRECO = :produtoPreco, PRODUTO_IMAGEM = :produtoImagem
                WHERE PRODUTO_ID = :produtoId";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([
            'produtoNome' => $produtoNome,
            'produtoDesc' => $produtoDesc,
            'produtoPreco' => $produtoPreco,
            'produtoImagem' => $produtoImagem,
            'produtoId' => $produtoId
        ]);

        echo json_encode(['status' => 'Produto atualizado com sucesso']);
    } else {
        echo json_encode(['error' => 'Dados incompletos']);
    }

} catch (PDOException $e) {
    echo "Erro de conexÃ£o: " . $e->getMessage();
    exit;
}
?>


2.4 - API para Deletar Produto (deletar_produto.php):
<?php
$host = 'www.thyagoquintas.com.br:3306';  
$db   = 'db_fornecido';                   
$user = 'user_fornecido';                 
$pass = 'senha_fornecida';                
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
$options = [
    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES   => false,
];

try {
    $pdo = new PDO($dsn, $user, $pass, $options);

    if (isset($_POST['PRODUTO_ID'])) {
        $produtoId = $_POST['PRODUTO_ID'];

        // Deletar o produto
        $sql = "DELETE FROM PRODUTO WHERE PRODUTO_ID = :produtoId";
        $stmt = $pdo->prepare($sql);
        $stmt->execute(['produtoId' => $produtoId]);

        echo json_encode(['status' => 'Produto deletado com sucesso']);
    } else {
        echo json_encode(['error' => 'ID do produto nÃ£o informado']);
    }

} catch (PDOException $e) {
    echo "Erro de conexÃ£o: " . $e->getMessage();
    exit;
}
?>


Passo 3: Atualizar o Layout XML
Agora, atualize o layout da ProdutosActivity para incluir o botÃ£o Incluir Produto e modifique o layout do item da RecyclerView para exibir os botÃµes Editar e Deletar.
activity_produtos.xml:

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".ProdutosActivity">

    <!-- BotÃ£o de Incluir Produto -->
    <Button
        android:id="@+id/incluirProdutoButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"
        android:layout_margin="16dp"
        android:layout_marginBottom="1dp"
        android:text="Incluir Produto"
        app:layout_constraintBottom_toTopOf="@+id/recyclerViewProdutos"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerViewProdutos"
        android:layout_width="409dp"
        android:layout_height="0dp"
        android:layout_marginBottom="1dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/incluirProdutoButton" />

</androidx.constraintlayout.widget.ConstraintLayout>


=========================================================


item_produto.xml (com botÃµes Editar e Deletar):
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal"
    android:padding="8dp">

    <ImageView
        android:id="@+id/imagemProduto"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:scaleType="centerCrop" />

    <LinearLayout
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:orientation="vertical"
        android:paddingStart="8dp">

        <TextView
            android:id="@+id/nomeProduto"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textStyle="bold" />

        <TextView
            android:id="@+id/descricaoProduto"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" />

        <TextView
            android:id="@+id/precoProduto"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content" />
    </LinearLayout>

    <!-- BotÃµes Editar e Deletar -->
    <Button
        android:id="@+id/editarButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Editar" />

    <Button
        android:id="@+id/deletarButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Deletar" />
</LinearLayout>


=============================================

Vamos criar o arquivo kotlin de interface chamado ApiService com os mÃ©todos a serem usados pela aplicaÃ§Ã£o:


import retrofit2.Call
import retrofit2.http.FormUrlEncoded
import retrofit2.http.Field
import retrofit2.http.GET
import retrofit2.http.POST

interface ApiService {

    // MÃ©todo para obter a lista de produtos
    @GET("produtos.php")
    fun getProdutos(): Call<List<Produto>>

    // MÃ©todo para incluir um produto
    @FormUrlEncoded
    @POST("incluir_produto.php")
    fun incluirProduto(
        @Field("PRODUTO_NOME") nome: String,
        @Field("PRODUTO_DESC") descricao: String,
        @Field("PRODUTO_PRECO") preco: String,
        @Field("PRODUTO_IMAGEM") imagem: String
    ): Call<Void>

    // MÃ©todo para editar um produto
    @FormUrlEncoded
    @POST("editar_produto.php")
    fun editarProduto(
        @Field("PRODUTO_ID") id: Int,
        @Field("PRODUTO_NOME") nome: String,
        @Field("PRODUTO_DESC") descricao: String,
        @Field("PRODUTO_PRECO") preco: String,
        @Field("PRODUTO_IMAGEM") imagem: String
    ): Call<Void>

    // MÃ©todo para deletar um produto
    @FormUrlEncoded
    @POST("deletar_produto.php")
    fun deletarProduto(
        @Field("PRODUTO_ID") id: Int
    ): Call<Void>

}

=============================================

Passo 4: Atualizar o Adapter para Gerenciar EdiÃ§Ã£o e DeleÃ§Ã£o
Agora, vamos modificar o CustomAdapter para permitir a ediÃ§Ã£o e exclusÃ£o de produtos.
CustomAdapter.kt:

import android.content.Intent
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.recyclerview.widget.RecyclerView
import com.squareup.picasso.Picasso
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class CustomAdapter(private val dataSet: List<Produto>, private val apiService: ApiService) :
    RecyclerView.Adapter<CustomAdapter.ViewHolder>() {

    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val nome: TextView = view.findViewById(R.id.nomeProduto)
        val descricao: TextView = view.findViewById(R.id.descricaoProduto)
        val preco: TextView = view.findViewById(R.id.precoProduto)
        val imagem: ImageView = view.findViewById(R.id.imagemProduto)
        val editarButton: Button = view.findViewById(R.id.editarButton)
        val deletarButton: Button = view.findViewById(R.id.deletarButton)
    }

    override fun onCreateViewHolder(viewGroup: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(viewGroup.context)
            .inflate(R.layout.item_produto, viewGroup, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(viewHolder: ViewHolder, position: Int) {
        val produto = dataSet[position]
        viewHolder.nome.text = produto.PRODUTO_NOME
        viewHolder.descricao.text = produto.PRODUTO_DESC
        viewHolder.preco.text = "R$ ${produto.PRODUTO_PRECO}"
        Picasso.get().load(produto.PRODUTO_IMAGEM).into(viewHolder.imagem)

        // Passar os dados do produto para a Activity de ediÃ§Ã£o
        viewHolder.editarButton.setOnClickListener {
            val intent = Intent(it.context, EditarProdutoActivity::class.java)
            intent.putExtra("PRODUTO_ID", produto.PRODUTO_ID)
            intent.putExtra("PRODUTO_NOME", produto.PRODUTO_NOME)
            intent.putExtra("PRODUTO_DESC", produto.PRODUTO_DESC)
            intent.putExtra("PRODUTO_PRECO", produto.PRODUTO_PRECO)
            intent.putExtra("PRODUTO_IMAGEM", produto.PRODUTO_IMAGEM)
            it.context.startActivity(intent)
        }

        // Deletar produto ao clicar no botÃ£o
        viewHolder.deletarButton.setOnClickListener {
            apiService.deletarProduto(produto.PRODUTO_ID).enqueue(object : Callback<Void> {
                override fun onResponse(call: Call<Void>, response: Response<Void>) {
                    Toast.makeText(it.context, "Produto deletado com sucesso!", Toast.LENGTH_LONG).show()
                }

                override fun onFailure(call: Call<Void>, t: Throwable) {
                    Toast.makeText(it.context, "Erro ao deletar o produto", Toast.LENGTH_LONG).show()
                }
            })
        }
    }

    override fun getItemCount() = dataSet.size
}


Passo 5: Criar as Activities para Editar e Incluir Produtos
Crie as Activity para editar e incluir produtos. Primeiro crie a activity chamada EditarProdutoActivity. ApÃ³s crie a activity IncluirProdutoActivity. Vamos a seguir editar o arquivo kotlin gerado da activity EditarProdutoActivity.


EditarProdutoActivity.kt:

import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class EditarProdutoActivity : AppCompatActivity() {

    private lateinit var nomeEditText: EditText
    private lateinit var descricaoEditText: EditText
    private lateinit var precoEditText: EditText
    private lateinit var imagemEditText: EditText
    private lateinit var salvarButton: Button

    private var produtoId: Int = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_editar_produto)

        nomeEditText = findViewById(R.id.nomeEditText)
        descricaoEditText = findViewById(R.id.descricaoEditText)
        precoEditText = findViewById(R.id.precoEditText)
        imagemEditText = findViewById(R.id.imagemEditText)
        salvarButton = findViewById(R.id.salvarButton)

        // Resgatar os dados passados pela Intent
        produtoId = intent.getIntExtra("PRODUTO_ID", 0)
        nomeEditText.setText(intent.getStringExtra("PRODUTO_NOME"))
        descricaoEditText.setText(intent.getStringExtra("PRODUTO_DESC"))
        precoEditText.setText(intent.getStringExtra("PRODUTO_PRECO"))
        imagemEditText.setText(intent.getStringExtra("PRODUTO_IMAGEM"))

        // ConfiguraÃ§Ã£o do Retrofit
        val retrofit = Retrofit.Builder()
            .baseUrl("http://192.168.56.1/meu_projeto_api/") // Substitua pelo seu endereÃ§o base
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        val apiService = retrofit.create(ApiService::class.java)

        salvarButton.setOnClickListener {
            // Atualizar produto via API
            val produtoAtualizado = Produto(
                produtoId,
                nomeEditText.text.toString(),
                descricaoEditText.text.toString(),
                precoEditText.text.toString(),
                imagemEditText.text.toString()
            )

            apiService.editarProduto(
                produtoAtualizado.PRODUTO_ID,
                produtoAtualizado.PRODUTO_NOME,
                produtoAtualizado.PRODUTO_DESC,
                produtoAtualizado.PRODUTO_PRECO,
                produtoAtualizado.PRODUTO_IMAGEM
            ).enqueue(object : Callback<Void> {
                override fun onResponse(call: Call<Void>, response: Response<Void>) {
                    if (response.isSuccessful) {
                        Toast.makeText(this@EditarProdutoActivity, "Produto atualizado com sucesso!", Toast.LENGTH_LONG).show()
                        finish()
                    } else {
                        Toast.makeText(this@EditarProdutoActivity, "Erro na atualizaÃ§Ã£o", Toast.LENGTH_LONG).show()
                    }
                }

                override fun onFailure(call: Call<Void>, t: Throwable) {
                    Toast.makeText(this@EditarProdutoActivity, "Erro ao atualizar o produto", Toast.LENGTH_LONG).show()
                }
            })
        }
    }
}


==================================================

activity_editar_produto.xml:

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".EditarProdutoActivity">

    <!-- Campo para o Nome do Produto -->
    <EditText
        android:id="@+id/nomeEditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="Nome do Produto"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <!-- Campo para a DescriÃ§Ã£o do Produto -->
    <EditText
        android:id="@+id/descricaoEditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="DescriÃ§Ã£o do Produto"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/nomeEditText" />

    <!-- Campo para o PreÃ§o do Produto -->
    <EditText
        android:id="@+id/precoEditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="PreÃ§o do Produto"
        android:inputType="numberDecimal"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/descricaoEditText" />

    <!-- Campo para a URL da Imagem do Produto -->
    <EditText
        android:id="@+id/imagemEditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="URL da Imagem do Produto"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/precoEditText" />

    <!-- BotÃ£o para Salvar as AlteraÃ§Ãµes -->
    <Button
        android:id="@+id/salvarButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Salvar"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/imagemEditText" />
</androidx.constraintlayout.widget.ConstraintLayout>


==================================================

IncluirProdutoActivity.kt:


import android.os.Bundle
import android.widget.Button
import android.widget.EditText
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class IncluirProdutoActivity : AppCompatActivity() {

    private lateinit var nomeEditText: EditText
    private lateinit var descricaoEditText: EditText
    private lateinit var precoEditText: EditText
    private lateinit var imagemEditText: EditText
    private lateinit var salvarButton: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_incluir_produto)

        nomeEditText = findViewById(R.id.nomeEditText)
        descricaoEditText = findViewById(R.id.descricaoEditText)
        precoEditText = findViewById(R.id.precoEditText)
        imagemEditText = findViewById(R.id.imagemEditText)
        salvarButton = findViewById(R.id.salvarButton)

        // ConfiguraÃ§Ã£o do Retrofit
        val retrofit = Retrofit.Builder()
            .baseUrl("http://192.168.56.1/meu_projeto_api/") // Substitua pelo seu endereÃ§o base
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        val apiService = retrofit.create(ApiService::class.java)

        salvarButton.setOnClickListener {
            val novoProduto = Produto(
                0,  // O ID serÃ¡ gerado automaticamente no banco de dados
                nomeEditText.text.toString(),
                descricaoEditText.text.toString(),
                precoEditText.text.toString(),
                imagemEditText.text.toString()
            )

            // Fazer a requisiÃ§Ã£o para incluir o produto
            apiService.incluirProduto(
                nomeEditText.text.toString(),
                descricaoEditText.text.toString(),
                precoEditText.text.toString(),
                imagemEditText.text.toString()
            ).enqueue(object : Callback<Void> {
                override fun onResponse(call: Call<Void>, response: Response<Void>) {
                    if (response.isSuccessful) {
                        Toast.makeText(this@IncluirProdutoActivity, "Produto incluÃƒÂ­do com sucesso!", Toast.LENGTH_LONG).show()
                        finish()
                    } else {
                        Toast.makeText(this@IncluirProdutoActivity, "Erro na inclusÃ£o", Toast.LENGTH_LONG).show()
                    }
                }

                override fun onFailure(call: Call<Void>, t: Throwable) {
                    Toast.makeText(this@IncluirProdutoActivity, "Erro ao incluir o produto", Toast.LENGTH_LONG).show()
                }
            })
        }
    }
}



============================================

activity_incluir_produto.xml:


<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".IncluirProdutoActivity">

    <!-- Campo para o Nome do Produto -->
    <EditText
        android:id="@+id/nomeEditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="Nome do Produto"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <!-- Campo para a DescriÃ§Ã£o do Produto -->
    <EditText
        android:id="@+id/descricaoEditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="DescriÃ§Ã£o do Produto"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/nomeEditText" />

    <!-- Campo para o PreÃ§o do Produto -->
    <EditText
        android:id="@+id/precoEditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="PreÃ§o do Produto"
        android:inputType="numberDecimal"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/descricaoEditText" />

    <!-- Campo para a URL da Imagem do Produto -->
    <EditText
        android:id="@+id/imagemEditText"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:hint="URL da Imagem do Produto"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/precoEditText" />

    <!-- BotÃ£o para Incluir o Produto -->
    <Button
        android:id="@+id/salvarButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Incluir Produto"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/imagemEditText" />

</androidx.constraintlayout.widget.ConstraintLayout>


========================================================

AtenÃ§Ã£o: Observe que nos arquivos kotlin das activities de inclusÃ£o (IncluirProdutoActivity.kt) e ediÃ§Ã£o (EditarProdutoActivity.kt) de produtos, Ã© necessÃ¡rio trocar o nÃºmero para o ip onde sua api estÃ¡ hospedada.

========================================================

Passo 6: Atualizar o Retrofit com as Novas Rotas
Atualize a interface ApiService diretamente no arquivo kotlin da Activity que lista produtos. Faremos entÃ£o a adaptaÃ§Ã£o de ProdutosActivity.kt para utilizar a interface ApiService. ProdutosActivity.kt:

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.http.Field
import retrofit2.http.FormUrlEncoded
import retrofit2.http.GET
import retrofit2.http.POST
import java.util.concurrent.TimeUnit

class ProdutosActivity : AppCompatActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: CustomAdapter
    private lateinit var addProductButton: Button  // BotÃ£o de Adicionar Produto

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_produtos)

        recyclerView = findViewById(R.id.recyclerViewProdutos)
        recyclerView.layoutManager = LinearLayoutManager(this)

        addProductButton = findViewById(R.id.incluirProdutoButton) // Inicializando o botÃ£o

        // Configurando o Retrofit
        val retrofit = Retrofit.Builder()
            .baseUrl("http://192.168.56.1/meu_projeto_api/")  // Substitua pelo seu ip local
            .addConverterFactory(GsonConverterFactory.create())
            .client(configureOkHttpClient())
            .build()

        val apiService = retrofit.create(ApiService::class.java)

        // Buscar produtos da API
        apiService.getProdutos().enqueue(object : Callback<List<Produto>> {
            override fun onResponse(call: Call<List<Produto>>, response: Response<List<Produto>>) {
                if (response.isSuccessful) {
                    val produtos = response.body() ?: emptyList()
                    adapter = CustomAdapter(produtos, apiService)
                    recyclerView.adapter = adapter
                } else {
                    Log.e("API Error", "Falha ao carregar os produtos. CÃ³digo: ${response.code()}")
                }
            }

            override fun onFailure(call: Call<List<Produto>>, t: Throwable) {
                Log.e("API Failure", "Erro ao carregar os produtos", t)
            }
        })

        // Adicionar listener para o botÃ£o de adicionar produto
        addProductButton.setOnClickListener {
            val intent = Intent(this, IncluirProdutoActivity::class.java)
            startActivity(intent)  // Abrir a tela de inclusÃ£o de produto
        }
    }

    // ConfiguraÃ§Ã£o do OkHttpClient com logging
    private fun configureOkHttpClient(): OkHttpClient {
        val logging = HttpLoggingInterceptor { message -> Log.d("OkHttp", message) }
        logging.level = HttpLoggingInterceptor.Level.BODY

        return OkHttpClient.Builder()
            .addInterceptor(logging)
            .connectTimeout(30, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(30, TimeUnit.SECONDS)
            .build()
    }

}